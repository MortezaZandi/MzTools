using OLTMockServer.DataStructures;
using OLTMockServer.DataStructures.Snap;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Telerik.WinControls;
using static Telerik.WinControls.UI.ValueMapper;

namespace OLTMockServer
{
    public class SnapOrderFactory : OrderFactory
    {
        public SnapOrderFactory() : base()
        {
        }

        public override Order CreateNewOrder(TestProject testProject, bool isAutoGenerated)
        {
            var order = new SnapOrder();
            var props = typeof(SnapOrder).GetProperties();
            order.IsAutoGenerated = isAutoGenerated;

            if (testProject.OrderPattern.PatternItems.Count == 0)
            {
                throw new ApplicationException("No pattern defined to create new order.");
            }

            if (testProject.Items.Count == 0)
            {
                throw new ApplicationException("No item defined to create new order.");
            }

            if (testProject.Vendors.Count == 0)
            {
                throw new ApplicationException("No vendor defined to create new order.");
            }

            foreach (OrderPatternItem item in testProject.OrderPattern.PatternItems)
            {
                var orderProp = props.FirstOrDefault(p => p.Name == item.PropertyName && p.PropertyType.Name == item.PropertyType);

                if (orderProp == null)
                {
                    throw new ApplicationException($"SnapOrder does not conatin property '{item.PropertyName}' with type of {item.PropertyType}");
                }

                object value = null;

                for (int i = 0; i < 50; i++)
                {
                    bool isNew = true;

                    value = CreatePropertyValue(item, testProject.OrderPattern, orderProp, out isNew);

                    if (!item.Unique)
                    {
                        break;
                    }
                    else if (isNew)
                    {
                        break;
                    }
                    else if (i == 49)
                    {
                        throw new ApplicationException($"{this.GetType().Name} unable to create a unique value for property '{item.PropertyType}', All the 50 created values was used before.");
                    }
                }

                try
                {
                    var typeHandler = TypeDescriptor.GetConverter(orderProp.PropertyType);

                    if (typeHandler.CanConvertFrom(value.GetType()))
                    {
                        orderProp.SetValue(order, typeHandler.ConvertFrom(value));
                    }
                    else
                    {
                        if (typeHandler.CanConvertFrom(typeof(string)) && value != null)
                        {
                            value = typeHandler.ConvertFrom(value.ToString());

                            orderProp.SetValue(order, value);
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new ApplicationException($"Error when {this.GetType().Name} trying to set property value of the {order.GetType().Name}. PropName: {orderProp.Name}, PropType:{orderProp.PropertyType.Name}, Value:{value}, ValueNullCheck:{value == null}", ex);
                }
            }

            //choose a random vendor:
            var vendorIndex = random.Next(0, testProject.Vendors.Count);
            var vendor = testProject.Vendors[vendorIndex];
            order.Vendor = vendor;
            order.VendorCode = vendor.Code;

            if (order.MaxItemCount == 0)
            {
                order.MaxItemCount = 1;
            }

            if (order.MaxItemCount > testProject.Items.Count)
            {
                order.MaxItemCount = testProject.Items.Count;
            }

            order.MaxItemCount = random.Next(1, order.MaxItemCount + 1);

            int maxTrtToFindNewItem = 1000;

            for (int i = 0; i < order.MaxItemCount; i++)
            {
                Item newItem = null;

                int tryCount = 0;

                while (true)
                {
                    newItem = CreateNewItem(testProject, vendor);

                    if (!order.Items.Any(o => o.Id == newItem.Id))
                    {
                        break;
                    }
                    else if (tryCount > maxTrtToFindNewItem)
                    {
                        newItem = null;
                        break;
                    }

                    tryCount++;
                }

                if (newItem != null)
                {
                    order.Items.Add(newItem);
                }
            }
            //choose a random customer:
            var customerIndex = random.Next(0, testProject.Customers.Count);
            var customer = testProject.Customers[customerIndex];
            order.Customer = customer;
            order.UserAddressCode = customer.Address;
            order.UserCode = customer.Code;

            order.Price = order.Items.Sum(i => i.Price);
            order.Price += order.PackingPrice + order.DeliveryPrice;
            order.DiscountValue = order.Items.Sum(i => i.Discount);

            return order;
        }

        private Item CreateNewItem(TestProject testProject, Vendor vendor)
        {
            var vendorItems = testProject.Items.Where(i => i.VendorCode == vendor.Code).ToList();
            var itemIndex = random.Next(0, vendorItems.Count);
            var item = vendorItems[itemIndex];

            //modify item info
            //make diff price
            //...

            return item;
        }
    }
}
