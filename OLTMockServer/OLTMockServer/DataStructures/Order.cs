using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing.Design;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Telerik.WinControls.UI;
using static OLTMockServer.Definitions;

namespace OLTMockServer.DataStructures
{
    [XmlInclude(typeof(Snap.SnapOrder))]
    [Serializable]
    public abstract class Order
    {
        public Order()
        {
            this.Items = new List<Item>();
            this.Customer = new Customer();
            this.Vendor = new Vendor();
            this.CreateDate = DateTime.Now;
            this.Code = Utils.GenerateCode(8);
            this.Activities = new List<OrderActivity>();
            this.UId = Guid.NewGuid();
            this.Logs = new List<LogInfo>();
        }

        public Guid UId { get; set; }

        [Browsable(false)]
        public List<Item> Items { get; set; }

        public string Code { get; set; }

        [Browsable(false)]
        public Customer Customer { get; set; }

        [Browsable(false)]
        public Vendor Vendor { get; set; }

        public bool Rejected { get; set; }
        public bool RejectedByVendor { get; set; }

        public DateTime CreateDate { get; set; }
        public string StatusCode { get; set; }
        public string StatusDescription { get; set; }
        public DateTime AcceptTime { get; set; }
        public DateTime PickTime { get; set; }
        public DateTime AckTime { get; set; }
        public DateTime RejectTime { get; set; }
        public string DeliveryMode { get; set; }
        public bool IsAutoGenerated { get; set; }
        public List<LogInfo> Logs { get; set; }
        public int MaxItemCount { get; set; }

        private OrderActivity SendSuccessActivity
        {
            get
            {
                return Activities.FindLast(a => a.ActivityType == OrderActivityTypes.Send && a.IsDone == true);
            }
        }

        private OrderActivity SendActivity
        {
            get
            {
                return Activities.FindLast(a => a.ActivityType == OrderActivityTypes.Send);
            }
        }

        private OrderActivity EditSuccessActivity
        {
            get
            {
                return Activities.FindLast(a => a.ActivityType == OrderActivityTypes.Edit && a.IsDone == true);
            }
        }

        private OrderActivity EditActivity
        {
            get
            {
                return Activities.FindLast(a => a.ActivityType == OrderActivityTypes.Edit);
            }
        }

        private bool IsSent
        {
            get
            {
                return SendSuccessActivity != null || EditSuccessActivity != null;
            }
        }

        public TimeSpan AckDelay
        {
            get
            {
                if (AckTime != DateTime.MinValue)
                {
                    DateTime baseTime = IsSent ? SendSuccessActivity.ProcessDate : CreateDate;
                    return TimeSpan.FromSeconds((long)(AckTime - baseTime).TotalSeconds);
                }

                return TimeSpan.Zero;
            }
        }

        public TimeSpan PickDelay
        {
            get
            {
                if (PickTime != DateTime.MinValue)
                {
                    DateTime baseTime = IsSent ? SendSuccessActivity.ProcessDate : CreateDate;
                    return TimeSpan.FromSeconds((long)(PickTime - baseTime).TotalSeconds);
                }

                return TimeSpan.Zero;
            }
        }

        public TimeSpan AcceptDelay
        {
            get
            {
                if (AcceptTime != DateTime.MinValue)
                {
                    DateTime baseTime = IsSent ? SendSuccessActivity.ProcessDate : CreateDate;
                    return TimeSpan.FromSeconds((long)(AcceptTime - baseTime).TotalSeconds);
                }

                return TimeSpan.Zero;
            }
        }

        public OrderStatusResults UIStatus
        {
            get
            {
                var sendActivity = SendActivity;
                var editActivity = EditActivity;
                bool isAckReceived = AckTime != DateTime.MinValue;
                bool isPickReveived = PickTime != DateTime.MinValue;
                bool isRejected = RejectTime != DateTime.MinValue;

                OrderStatusResults status = OrderStatusResults.Unknown;

                if (IsSent)
                {
                    status = OrderStatusResults.Sent;

                    if (isAckReceived)
                    {
                        status = OrderStatusResults.AckDone;
                    }

                    if (isPickReveived)
                    {
                        status = OrderStatusResults.PickDone;
                    }

                    if (isRejected)
                    {
                        status = OrderStatusResults.Rejected;
                    }
                }
                else
                {
                    if ((sendActivity != null && sendActivity.TryCount > 0) || (EditActivity != null && editActivity.TryCount > 0))
                    {
                        status = OrderStatusResults.SendFailed;
                    }
                    else
                    {
                        status = OrderStatusResults.NotSend;
                    }
                }

                return status;
            }
        }

        public List<OrderActivity> Activities { get; set; }

        public void AddActivity(Definitions.OrderActivityTypes activityType, bool isAutoActivity)
        {
            this.Activities.Add(new OrderActivity
            {
                //OrderInstance = LightClone(),
                ActivityDate = DateTime.Now,
                ActivityType = activityType,
                IsCreatedByAuto = isAutoActivity,
            });
        }

        public void AddActivity(Definitions.OrderActivityTypes activityType, bool isCreatedByAuto, DateTime createDate, DateTime processDate)
        {
            this.Activities.Add(new OrderActivity
            {
                //OrderInstance = LightClone(),
                ActivityDate = createDate,
                ActivityType = activityType,
                IsCreatedByAuto = isCreatedByAuto,
                ProcessDate = processDate,
            });
        }

        public abstract Order LightClone(bool keepId = false);

        public bool HasNotPrcessedActivity
        {
            get
            {
                return this.Activities.Any(a => a.ProcessDate == DateTime.MinValue && a.TryCount < Definitions.Order_Max_Activity_Try_Count);
            }
        }

        public void AddLog(string title, string message, Definitions.LogTypes logType = LogTypes.None, params object[] args)
        {
            if (args != null && args.Length > 0)
            {
                message = string.Format(message, args);
            }

            if (!string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(title))
            {
                Logs.Add(new LogInfo(title, message, logType));
            }
            else if (!string.IsNullOrEmpty(message))
            {
                Logs.Add(new LogInfo(message, logType));
            }
            else
            {
                Logs.Add(new LogInfo());
            }
        }

        public void AddLog(string message, Definitions.LogTypes logType = LogTypes.None, params object[] args)
        {
            if (args != null && args.Length > 0)
            {
                message = string.Format(message, args);
            }

            if (!string.IsNullOrEmpty(message))
            {
                Logs.Add(new LogInfo(message, logType));
            }
            else
            {
                Logs.Add(new LogInfo());
            }
        }
    }
}
