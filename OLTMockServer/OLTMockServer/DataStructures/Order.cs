using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing.Design;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Telerik.WinControls.UI;

namespace OLTMockServer.DataStructures
{
    [XmlInclude(typeof(Snap.SnapOrder))]
    [Serializable]
    public abstract class Order
    {
        public Order()
        {
            this.Items = new List<Item>();
            this.Customer = new Customer();
            this.Vendor = new Vendor();
            this.CreateDate = DateTime.Now;
            this.Code = Utils.GenerateCode(8);
            this.Activities = new List<OrderActivity>();
            this.UId = Guid.NewGuid();
        }

        public Guid UId { get; set; }

        [Browsable(false)]
        public List<Item> Items { get; set; }

        public string Code { get; set; }

        [Browsable(false)]
        public Customer Customer { get; set; }

        [Browsable(false)]
        public Vendor Vendor { get; set; }

        public DateTime CreateDate { get; set; }
        public string StatusCode { get; set; }
        public string StatusDescription { get; set; }
        public DateTime AcceptTime { get; set; }
        public DateTime PickTime { get; set; }
        public DateTime AckTime { get; set; }
        public DateTime RejectTime { get; set; }
        public string DeliveryMode { get; set; }
        public bool IsAutoGenerated { get; set; }

        public List<OrderActivity> Activities { get; set; }

        public void AddActivity(Definitions.OrderActivityTypes activityType, bool isAutoActivity)
        {
            this.Activities.Add(new OrderActivity
            {
                //OrderInstance = LightClone(),
                ActivityDate = DateTime.Now,
                ActivityType = activityType,
                IsCreatedByAuto = isAutoActivity,
            });
        }

        public void AddActivity(Definitions.OrderActivityTypes activityType, bool isCreatedByAuto, DateTime createDate, DateTime processDate)
        {
            this.Activities.Add(new OrderActivity
            {
                //OrderInstance = LightClone(),
                ActivityDate = createDate,
                ActivityType = activityType,
                IsCreatedByAuto = isCreatedByAuto,
                ProcessDate = processDate,
            });
        }

        public abstract Order LightClone(bool keepId = false);

        public bool HasNotPrcessedActivity
        {
            get
            {
                return this.Activities.Any(a => a.ProcessDate == DateTime.MinValue && a.TryCount < Definitions.Order_Max_Activity_Try_Count);
            }
        }
    }
}
